/*======================================
  Settings
======================================*/
/*======================================
  Sass Mixins and Functions
======================================*/
/*======================================
  Lists
======================================*/
.container {
  max-width: 1295px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 10px;
  padding-right: 10px;
}

@media (max-width: 768px) {
  .container {
    padding-left: 15px;
    padding-right: 15px;
  }
}

#pag-list-person .person-list-box .box .list-person .item {
  display: flex;
  align-items: center;
  border: 1px solid #eee;
  padding: 20px;
  border-radius: 5px;
  margin-top: 5px;
}

#pag-list-person .person-list-box .box .list-person .item:hover {
  background-color: #eee;
}

#pag-list-person .person-list-box .box .list-person .item .icon {
  width: 50px;
  margin-right: 10px;
}

#pag-list-person .person-list-box .box .list-person .item h2 {
  font-size: 20px;
  padding: 0;
  margin: 0;
}

#pag-list-person .person-list-box .box .list-person .item span {
  display: block;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
